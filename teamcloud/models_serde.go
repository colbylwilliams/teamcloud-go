//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package teamcloud

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type AdapterInformationListDataResult.
func (a AdapterInformationListDataResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", a.Code)
	populate(objectMap, "data", a.Data)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "status", a.Status)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CommandAuditEntity.
func (c CommandAuditEntity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "command", c.Command)
	populate(objectMap, "commandId", c.CommandID)
	populate(objectMap, "commandJson", c.CommandJSON)
	populate(objectMap, "componentTask", c.ComponentTask)
	populateTimeRFC3339(objectMap, "created", c.Created)
	populate(objectMap, "customStatus", c.CustomStatus)
	populate(objectMap, "eTag", &c.ETag)
	populate(objectMap, "errors", c.Errors)
	populate(objectMap, "organizationId", c.OrganizationID)
	populate(objectMap, "parentId", c.ParentID)
	populate(objectMap, "partitionKey", c.PartitionKey)
	populate(objectMap, "projectId", c.ProjectID)
	populate(objectMap, "resultJson", c.ResultJSON)
	populate(objectMap, "rowKey", c.RowKey)
	populate(objectMap, "runtimeStatus", c.RuntimeStatus)
	populateTimeRFC3339(objectMap, "timestamp", c.Timestamp)
	populateTimeRFC3339(objectMap, "updated", c.Updated)
	populate(objectMap, "userId", c.UserID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CommandAuditEntity.
func (c *CommandAuditEntity) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "command":
				err = unpopulate(val, &c.Command)
				delete(rawMsg, key)
		case "commandId":
				err = unpopulate(val, &c.CommandID)
				delete(rawMsg, key)
		case "commandJson":
				err = unpopulate(val, &c.CommandJSON)
				delete(rawMsg, key)
		case "componentTask":
				err = unpopulate(val, &c.ComponentTask)
				delete(rawMsg, key)
		case "created":
				err = unpopulateTimeRFC3339(val, &c.Created)
				delete(rawMsg, key)
		case "customStatus":
				err = unpopulate(val, &c.CustomStatus)
				delete(rawMsg, key)
		case "eTag":
				err = unpopulate(val, &c.ETag)
				delete(rawMsg, key)
		case "errors":
				err = unpopulate(val, &c.Errors)
				delete(rawMsg, key)
		case "organizationId":
				err = unpopulate(val, &c.OrganizationID)
				delete(rawMsg, key)
		case "parentId":
				err = unpopulate(val, &c.ParentID)
				delete(rawMsg, key)
		case "partitionKey":
				err = unpopulate(val, &c.PartitionKey)
				delete(rawMsg, key)
		case "projectId":
				err = unpopulate(val, &c.ProjectID)
				delete(rawMsg, key)
		case "resultJson":
				err = unpopulate(val, &c.ResultJSON)
				delete(rawMsg, key)
		case "rowKey":
				err = unpopulate(val, &c.RowKey)
				delete(rawMsg, key)
		case "runtimeStatus":
				err = unpopulate(val, &c.RuntimeStatus)
				delete(rawMsg, key)
		case "timestamp":
				err = unpopulateTimeRFC3339(val, &c.Timestamp)
				delete(rawMsg, key)
		case "updated":
				err = unpopulateTimeRFC3339(val, &c.Updated)
				delete(rawMsg, key)
		case "userId":
				err = unpopulate(val, &c.UserID)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CommandAuditEntityListDataResult.
func (c CommandAuditEntityListDataResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", c.Code)
	populate(objectMap, "data", c.Data)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "status", c.Status)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Component.
func (c Component) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creator", c.Creator)
	populateTimeRFC3339(objectMap, "deleted", c.Deleted)
	populate(objectMap, "deploymentScopeId", c.DeploymentScopeID)
	populate(objectMap, "deploymentScopeName", c.DeploymentScopeName)
	populate(objectMap, "description", c.Description)
	populate(objectMap, "displayName", c.DisplayName)
	populate(objectMap, "href", c.Href)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "identityId", c.IdentityID)
	populate(objectMap, "inputJson", c.InputJSON)
	populate(objectMap, "organization", c.Organization)
	populate(objectMap, "organizationName", c.OrganizationName)
	populate(objectMap, "projectId", c.ProjectID)
	populate(objectMap, "projectName", c.ProjectName)
	populate(objectMap, "resourceId", c.ResourceID)
	populate(objectMap, "resourceState", c.ResourceState)
	populate(objectMap, "resourceUrl", c.ResourceURL)
	populate(objectMap, "slug", c.Slug)
	populate(objectMap, "ttl", c.TTL)
	populate(objectMap, "templateId", c.TemplateID)
	populate(objectMap, "type", c.Type)
	populate(objectMap, "valueJson", c.ValueJSON)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Component.
func (c *Component) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creator":
				err = unpopulate(val, &c.Creator)
				delete(rawMsg, key)
		case "deleted":
				err = unpopulateTimeRFC3339(val, &c.Deleted)
				delete(rawMsg, key)
		case "deploymentScopeId":
				err = unpopulate(val, &c.DeploymentScopeID)
				delete(rawMsg, key)
		case "deploymentScopeName":
				err = unpopulate(val, &c.DeploymentScopeName)
				delete(rawMsg, key)
		case "description":
				err = unpopulate(val, &c.Description)
				delete(rawMsg, key)
		case "displayName":
				err = unpopulate(val, &c.DisplayName)
				delete(rawMsg, key)
		case "href":
				err = unpopulate(val, &c.Href)
				delete(rawMsg, key)
		case "id":
				err = unpopulate(val, &c.ID)
				delete(rawMsg, key)
		case "identityId":
				err = unpopulate(val, &c.IdentityID)
				delete(rawMsg, key)
		case "inputJson":
				err = unpopulate(val, &c.InputJSON)
				delete(rawMsg, key)
		case "organization":
				err = unpopulate(val, &c.Organization)
				delete(rawMsg, key)
		case "organizationName":
				err = unpopulate(val, &c.OrganizationName)
				delete(rawMsg, key)
		case "projectId":
				err = unpopulate(val, &c.ProjectID)
				delete(rawMsg, key)
		case "projectName":
				err = unpopulate(val, &c.ProjectName)
				delete(rawMsg, key)
		case "resourceId":
				err = unpopulate(val, &c.ResourceID)
				delete(rawMsg, key)
		case "resourceState":
				err = unpopulate(val, &c.ResourceState)
				delete(rawMsg, key)
		case "resourceUrl":
				err = unpopulate(val, &c.ResourceURL)
				delete(rawMsg, key)
		case "slug":
				err = unpopulate(val, &c.Slug)
				delete(rawMsg, key)
		case "ttl":
				err = unpopulate(val, &c.TTL)
				delete(rawMsg, key)
		case "templateId":
				err = unpopulate(val, &c.TemplateID)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, &c.Type)
				delete(rawMsg, key)
		case "valueJson":
				err = unpopulate(val, &c.ValueJSON)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ComponentListDataResult.
func (c ComponentListDataResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", c.Code)
	populate(objectMap, "data", c.Data)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "status", c.Status)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ComponentTask.
func (c ComponentTask) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "componentId", c.ComponentID)
	populate(objectMap, "componentName", c.ComponentName)
	populateTimeRFC3339(objectMap, "created", c.Created)
	populate(objectMap, "exitCode", c.ExitCode)
	populateTimeRFC3339(objectMap, "finished", c.Finished)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "inputJson", c.InputJSON)
	populate(objectMap, "organization", c.Organization)
	populate(objectMap, "organizationName", c.OrganizationName)
	populate(objectMap, "output", c.Output)
	populate(objectMap, "projectId", c.ProjectID)
	populate(objectMap, "projectName", c.ProjectName)
	populate(objectMap, "requestedBy", c.RequestedBy)
	populate(objectMap, "resourceId", c.ResourceID)
	populate(objectMap, "scheduleId", c.ScheduleID)
	populateTimeRFC3339(objectMap, "started", c.Started)
	populate(objectMap, "taskState", c.TaskState)
	populate(objectMap, "type", c.Type)
	populate(objectMap, "typeName", c.TypeName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ComponentTask.
func (c *ComponentTask) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "componentId":
				err = unpopulate(val, &c.ComponentID)
				delete(rawMsg, key)
		case "componentName":
				err = unpopulate(val, &c.ComponentName)
				delete(rawMsg, key)
		case "created":
				err = unpopulateTimeRFC3339(val, &c.Created)
				delete(rawMsg, key)
		case "exitCode":
				err = unpopulate(val, &c.ExitCode)
				delete(rawMsg, key)
		case "finished":
				err = unpopulateTimeRFC3339(val, &c.Finished)
				delete(rawMsg, key)
		case "id":
				err = unpopulate(val, &c.ID)
				delete(rawMsg, key)
		case "inputJson":
				err = unpopulate(val, &c.InputJSON)
				delete(rawMsg, key)
		case "organization":
				err = unpopulate(val, &c.Organization)
				delete(rawMsg, key)
		case "organizationName":
				err = unpopulate(val, &c.OrganizationName)
				delete(rawMsg, key)
		case "output":
				err = unpopulate(val, &c.Output)
				delete(rawMsg, key)
		case "projectId":
				err = unpopulate(val, &c.ProjectID)
				delete(rawMsg, key)
		case "projectName":
				err = unpopulate(val, &c.ProjectName)
				delete(rawMsg, key)
		case "requestedBy":
				err = unpopulate(val, &c.RequestedBy)
				delete(rawMsg, key)
		case "resourceId":
				err = unpopulate(val, &c.ResourceID)
				delete(rawMsg, key)
		case "scheduleId":
				err = unpopulate(val, &c.ScheduleID)
				delete(rawMsg, key)
		case "started":
				err = unpopulateTimeRFC3339(val, &c.Started)
				delete(rawMsg, key)
		case "taskState":
				err = unpopulate(val, &c.TaskState)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, &c.Type)
				delete(rawMsg, key)
		case "typeName":
				err = unpopulate(val, &c.TypeName)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ComponentTaskListDataResult.
func (c ComponentTaskListDataResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", c.Code)
	populate(objectMap, "data", c.Data)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "status", c.Status)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ComponentTaskRunner.
func (c ComponentTaskRunner) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "webServer", c.WebServer)
	populate(objectMap, "with", c.With)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ComponentTemplate.
func (c ComponentTemplate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "configuration", &c.Configuration)
	populate(objectMap, "description", c.Description)
	populate(objectMap, "displayName", c.DisplayName)
	populate(objectMap, "folder", c.Folder)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "inputJsonSchema", c.InputJSONSchema)
	populate(objectMap, "organization", c.Organization)
	populate(objectMap, "organizationName", c.OrganizationName)
	populate(objectMap, "parentId", c.ParentID)
	populate(objectMap, "permissions", c.Permissions)
	populate(objectMap, "repository", c.Repository)
	populate(objectMap, "taskRunner", c.TaskRunner)
	populate(objectMap, "tasks", c.Tasks)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ComponentTemplateListDataResult.
func (c ComponentTemplateListDataResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", c.Code)
	populate(objectMap, "data", c.Data)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "status", c.Status)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ComponentTemplatePermissions.
func (c ComponentTemplatePermissions) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "Adapter", c.Adapter)
	populate(objectMap, "Admin", c.Admin)
	populate(objectMap, "Member", c.Member)
	populate(objectMap, "None", c.None)
	populate(objectMap, "Owner", c.Owner)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentScope.
func (d DeploymentScope) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authorizable", d.Authorizable)
	populate(objectMap, "authorizeUrl", d.AuthorizeURL)
	populate(objectMap, "authorized", d.Authorized)
	populate(objectMap, "componentTypes", d.ComponentTypes)
	populate(objectMap, "displayName", d.DisplayName)
	populate(objectMap, "id", d.ID)
	populate(objectMap, "inputData", d.InputData)
	populate(objectMap, "inputDataSchema", d.InputDataSchema)
	populate(objectMap, "isDefault", d.IsDefault)
	populate(objectMap, "managementGroupId", d.ManagementGroupID)
	populate(objectMap, "organization", d.Organization)
	populate(objectMap, "organizationName", d.OrganizationName)
	populate(objectMap, "slug", d.Slug)
	populate(objectMap, "subscriptionIds", d.SubscriptionIDs)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentScopeListDataResult.
func (d DeploymentScopeListDataResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", d.Code)
	populate(objectMap, "data", d.Data)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "status", d.Status)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ErrorResult.
func (e ErrorResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "errors", e.Errors)
	populate(objectMap, "status", e.Status)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Organization.
func (o Organization) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayName", o.DisplayName)
	populate(objectMap, "galleryId", o.GalleryID)
	populate(objectMap, "id", o.ID)
	populate(objectMap, "location", o.Location)
	populate(objectMap, "registryId", o.RegistryID)
	populate(objectMap, "resourceId", o.ResourceID)
	populate(objectMap, "resourceState", o.ResourceState)
	populate(objectMap, "secretsVaultId", o.SecretsVaultID)
	populate(objectMap, "slug", o.Slug)
	populate(objectMap, "storageId", o.StorageID)
	populate(objectMap, "subscriptionId", o.SubscriptionID)
	populate(objectMap, "tags", o.Tags)
	populate(objectMap, "tenant", o.Tenant)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OrganizationDefinition.
func (o OrganizationDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayName", o.DisplayName)
	populate(objectMap, "location", o.Location)
	populate(objectMap, "slug", o.Slug)
	populate(objectMap, "subscriptionId", o.SubscriptionID)
	populate(objectMap, "tags", o.Tags)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OrganizationListDataResult.
func (o OrganizationListDataResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", o.Code)
	populate(objectMap, "data", o.Data)
	populate(objectMap, "location", o.Location)
	populate(objectMap, "status", o.Status)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Project.
func (p Project) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "deleted", p.Deleted)
	populate(objectMap, "displayName", p.DisplayName)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "organization", p.Organization)
	populate(objectMap, "organizationName", p.OrganizationName)
	populate(objectMap, "resourceId", p.ResourceID)
	populate(objectMap, "resourceState", p.ResourceState)
	populate(objectMap, "secretsVaultId", p.SecretsVaultID)
	populate(objectMap, "sharedVaultId", p.SharedVaultID)
	populate(objectMap, "slug", p.Slug)
	populate(objectMap, "storageId", p.StorageID)
	populate(objectMap, "ttl", p.TTL)
	populate(objectMap, "tags", p.Tags)
	populate(objectMap, "template", p.Template)
	populate(objectMap, "templateInput", p.TemplateInput)
	populate(objectMap, "users", p.Users)
	populate(objectMap, "vaultId", p.VaultID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Project.
func (p *Project) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "deleted":
				err = unpopulateTimeRFC3339(val, &p.Deleted)
				delete(rawMsg, key)
		case "displayName":
				err = unpopulate(val, &p.DisplayName)
				delete(rawMsg, key)
		case "id":
				err = unpopulate(val, &p.ID)
				delete(rawMsg, key)
		case "organization":
				err = unpopulate(val, &p.Organization)
				delete(rawMsg, key)
		case "organizationName":
				err = unpopulate(val, &p.OrganizationName)
				delete(rawMsg, key)
		case "resourceId":
				err = unpopulate(val, &p.ResourceID)
				delete(rawMsg, key)
		case "resourceState":
				err = unpopulate(val, &p.ResourceState)
				delete(rawMsg, key)
		case "secretsVaultId":
				err = unpopulate(val, &p.SecretsVaultID)
				delete(rawMsg, key)
		case "sharedVaultId":
				err = unpopulate(val, &p.SharedVaultID)
				delete(rawMsg, key)
		case "slug":
				err = unpopulate(val, &p.Slug)
				delete(rawMsg, key)
		case "storageId":
				err = unpopulate(val, &p.StorageID)
				delete(rawMsg, key)
		case "ttl":
				err = unpopulate(val, &p.TTL)
				delete(rawMsg, key)
		case "tags":
				err = unpopulate(val, &p.Tags)
				delete(rawMsg, key)
		case "template":
				err = unpopulate(val, &p.Template)
				delete(rawMsg, key)
		case "templateInput":
				err = unpopulate(val, &p.TemplateInput)
				delete(rawMsg, key)
		case "users":
				err = unpopulate(val, &p.Users)
				delete(rawMsg, key)
		case "vaultId":
				err = unpopulate(val, &p.VaultID)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ProjectDefinition.
func (p ProjectDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayName", p.DisplayName)
	populate(objectMap, "slug", p.Slug)
	populate(objectMap, "template", p.Template)
	populate(objectMap, "templateInput", p.TemplateInput)
	populate(objectMap, "users", p.Users)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProjectIdentity.
func (p ProjectIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "clientId", p.ClientID)
	populate(objectMap, "clientSecret", p.ClientSecret)
	populate(objectMap, "deploymentScopeId", p.DeploymentScopeID)
	populate(objectMap, "displayName", p.DisplayName)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "objectId", p.ObjectID)
	populate(objectMap, "organization", p.Organization)
	populate(objectMap, "organizationName", p.OrganizationName)
	populate(objectMap, "projectId", p.ProjectID)
	populate(objectMap, "projectName", p.ProjectName)
	populate(objectMap, "redirectUrls", p.RedirectUrls)
	populate(objectMap, "tenantId", p.TenantID)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProjectIdentityListDataResult.
func (p ProjectIdentityListDataResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", p.Code)
	populate(objectMap, "data", p.Data)
	populate(objectMap, "location", p.Location)
	populate(objectMap, "status", p.Status)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProjectListDataResult.
func (p ProjectListDataResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", p.Code)
	populate(objectMap, "data", p.Data)
	populate(objectMap, "location", p.Location)
	populate(objectMap, "status", p.Status)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProjectMembership.
func (p ProjectMembership) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "projectId", p.ProjectID)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "role", p.Role)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProjectTemplate.
func (p ProjectTemplate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "components", p.Components)
	populate(objectMap, "description", p.Description)
	populate(objectMap, "displayName", p.DisplayName)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "inputJsonSchema", p.InputJSONSchema)
	populate(objectMap, "isDefault", p.IsDefault)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "organization", p.Organization)
	populate(objectMap, "organizationName", p.OrganizationName)
	populate(objectMap, "repository", p.Repository)
	populate(objectMap, "slug", p.Slug)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProjectTemplateListDataResult.
func (p ProjectTemplateListDataResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", p.Code)
	populate(objectMap, "data", p.Data)
	populate(objectMap, "location", p.Location)
	populate(objectMap, "status", p.Status)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ResultError.
func (r ResultError) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", r.Code)
	populate(objectMap, "errors", r.Errors)
	populate(objectMap, "message", r.Message)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Schedule.
func (s Schedule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "componentTasks", s.ComponentTasks)
	populateTimeRFC3339(objectMap, "created", s.Created)
	populate(objectMap, "creator", s.Creator)
	populate(objectMap, "daysOfWeek", s.DaysOfWeek)
	populate(objectMap, "enabled", s.Enabled)
	populate(objectMap, "id", s.ID)
	populateTimeRFC3339(objectMap, "lastRun", s.LastRun)
	populateTimeRFC3339(objectMap, "lastUpdated", s.LastUpdated)
	populate(objectMap, "lastUpdatedBy", s.LastUpdatedBy)
	populate(objectMap, "organization", s.Organization)
	populate(objectMap, "organizationName", s.OrganizationName)
	populate(objectMap, "projectId", s.ProjectID)
	populate(objectMap, "projectName", s.ProjectName)
	populate(objectMap, "recurring", s.Recurring)
	populate(objectMap, "utcHour", s.UTCHour)
	populate(objectMap, "utcMinute", s.UTCMinute)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Schedule.
func (s *Schedule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "componentTasks":
				err = unpopulate(val, &s.ComponentTasks)
				delete(rawMsg, key)
		case "created":
				err = unpopulateTimeRFC3339(val, &s.Created)
				delete(rawMsg, key)
		case "creator":
				err = unpopulate(val, &s.Creator)
				delete(rawMsg, key)
		case "daysOfWeek":
				err = unpopulate(val, &s.DaysOfWeek)
				delete(rawMsg, key)
		case "enabled":
				err = unpopulate(val, &s.Enabled)
				delete(rawMsg, key)
		case "id":
				err = unpopulate(val, &s.ID)
				delete(rawMsg, key)
		case "lastRun":
				err = unpopulateTimeRFC3339(val, &s.LastRun)
				delete(rawMsg, key)
		case "lastUpdated":
				err = unpopulateTimeRFC3339(val, &s.LastUpdated)
				delete(rawMsg, key)
		case "lastUpdatedBy":
				err = unpopulate(val, &s.LastUpdatedBy)
				delete(rawMsg, key)
		case "organization":
				err = unpopulate(val, &s.Organization)
				delete(rawMsg, key)
		case "organizationName":
				err = unpopulate(val, &s.OrganizationName)
				delete(rawMsg, key)
		case "projectId":
				err = unpopulate(val, &s.ProjectID)
				delete(rawMsg, key)
		case "projectName":
				err = unpopulate(val, &s.ProjectName)
				delete(rawMsg, key)
		case "recurring":
				err = unpopulate(val, &s.Recurring)
				delete(rawMsg, key)
		case "utcHour":
				err = unpopulate(val, &s.UTCHour)
				delete(rawMsg, key)
		case "utcMinute":
				err = unpopulate(val, &s.UTCMinute)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ScheduleDefinition.
func (s ScheduleDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "componentTasks", s.ComponentTasks)
	populate(objectMap, "daysOfWeek", s.DaysOfWeek)
	populate(objectMap, "enabled", s.Enabled)
	populate(objectMap, "recurring", s.Recurring)
	populate(objectMap, "utcHour", s.UTCHour)
	populate(objectMap, "utcMinute", s.UTCMinute)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ScheduleListDataResult.
func (s ScheduleListDataResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", s.Code)
	populate(objectMap, "data", s.Data)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "status", s.Status)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StatusResult.
func (s StatusResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", s.Code)
	populate(objectMap, "errors", s.Errors)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "state", s.State)
	populate(objectMap, "stateMessage", s.StateMessage)
	populate(objectMap, "status", s.Status)
	populate(objectMap, "_trackingId", s.TrackingID)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StringDictionaryDataResult.
func (s StringDictionaryDataResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", s.Code)
	populate(objectMap, "data", s.Data)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "status", s.Status)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StringListDataResult.
func (s StringListDataResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", s.Code)
	populate(objectMap, "data", s.Data)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "status", s.Status)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type User.
func (u User) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "alternateIdentities", u.AlternateIdentities)
	populate(objectMap, "displayName", u.DisplayName)
	populate(objectMap, "id", u.ID)
	populate(objectMap, "loginName", u.LoginName)
	populate(objectMap, "mailAddress", u.MailAddress)
	populate(objectMap, "organization", u.Organization)
	populate(objectMap, "organizationName", u.OrganizationName)
	populate(objectMap, "projectMemberships", u.ProjectMemberships)
	populate(objectMap, "properties", u.Properties)
	populate(objectMap, "role", u.Role)
	populate(objectMap, "userType", u.UserType)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type UserDefinition.
func (u UserDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identifier", u.Identifier)
	populate(objectMap, "properties", u.Properties)
	populate(objectMap, "role", u.Role)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type UserListDataResult.
func (u UserListDataResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", u.Code)
	populate(objectMap, "data", u.Data)
	populate(objectMap, "location", u.Location)
	populate(objectMap, "status", u.Status)
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}

