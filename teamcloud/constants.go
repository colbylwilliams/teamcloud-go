//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package teamcloud

const host = "https://teamclouddemo-api.azurewebsites.net"

const (
	moduleName = "teamcloud"
	moduleVersion = "v0.5.2"
)

type AdapterInformationType string

const (
	AdapterInformationTypeAzureDevOps AdapterInformationType = "AzureDevOps"
	AdapterInformationTypeAzureResourceManager AdapterInformationType = "AzureResourceManager"
	AdapterInformationTypeGitHub AdapterInformationType = "GitHub"
	AdapterInformationTypeKubernetes AdapterInformationType = "Kubernetes"
)

// PossibleAdapterInformationTypeValues returns the possible values for the AdapterInformationType const type.
func PossibleAdapterInformationTypeValues() []AdapterInformationType {
	return []AdapterInformationType{	
		AdapterInformationTypeAzureDevOps,
		AdapterInformationTypeAzureResourceManager,
		AdapterInformationTypeGitHub,
		AdapterInformationTypeKubernetes,
	}
}

// ToPtr returns a *AdapterInformationType pointing to the current value.
func (c AdapterInformationType) ToPtr() *AdapterInformationType {
	return &c
}

type CommandAuditEntityRuntimeStatus string

const (
	CommandAuditEntityRuntimeStatusCanceled CommandAuditEntityRuntimeStatus = "Canceled"
	CommandAuditEntityRuntimeStatusCompleted CommandAuditEntityRuntimeStatus = "Completed"
	CommandAuditEntityRuntimeStatusContinuedAsNew CommandAuditEntityRuntimeStatus = "ContinuedAsNew"
	CommandAuditEntityRuntimeStatusFailed CommandAuditEntityRuntimeStatus = "Failed"
	CommandAuditEntityRuntimeStatusPending CommandAuditEntityRuntimeStatus = "Pending"
	CommandAuditEntityRuntimeStatusRunning CommandAuditEntityRuntimeStatus = "Running"
	CommandAuditEntityRuntimeStatusTerminated CommandAuditEntityRuntimeStatus = "Terminated"
	CommandAuditEntityRuntimeStatusUnknown CommandAuditEntityRuntimeStatus = "Unknown"
)

// PossibleCommandAuditEntityRuntimeStatusValues returns the possible values for the CommandAuditEntityRuntimeStatus const type.
func PossibleCommandAuditEntityRuntimeStatusValues() []CommandAuditEntityRuntimeStatus {
	return []CommandAuditEntityRuntimeStatus{	
		CommandAuditEntityRuntimeStatusCanceled,
		CommandAuditEntityRuntimeStatusCompleted,
		CommandAuditEntityRuntimeStatusContinuedAsNew,
		CommandAuditEntityRuntimeStatusFailed,
		CommandAuditEntityRuntimeStatusPending,
		CommandAuditEntityRuntimeStatusRunning,
		CommandAuditEntityRuntimeStatusTerminated,
		CommandAuditEntityRuntimeStatusUnknown,
	}
}

// ToPtr returns a *CommandAuditEntityRuntimeStatus pointing to the current value.
func (c CommandAuditEntityRuntimeStatus) ToPtr() *CommandAuditEntityRuntimeStatus {
	return &c
}

type ComponentResourceState string

const (
	ComponentResourceStateDeprovisioned ComponentResourceState = "Deprovisioned"
	ComponentResourceStateDeprovisioning ComponentResourceState = "Deprovisioning"
	ComponentResourceStateFailed ComponentResourceState = "Failed"
	ComponentResourceStateInitializing ComponentResourceState = "Initializing"
	ComponentResourceStatePending ComponentResourceState = "Pending"
	ComponentResourceStateProvisioned ComponentResourceState = "Provisioned"
	ComponentResourceStateProvisioning ComponentResourceState = "Provisioning"
)

// PossibleComponentResourceStateValues returns the possible values for the ComponentResourceState const type.
func PossibleComponentResourceStateValues() []ComponentResourceState {
	return []ComponentResourceState{	
		ComponentResourceStateDeprovisioned,
		ComponentResourceStateDeprovisioning,
		ComponentResourceStateFailed,
		ComponentResourceStateInitializing,
		ComponentResourceStatePending,
		ComponentResourceStateProvisioned,
		ComponentResourceStateProvisioning,
	}
}

// ToPtr returns a *ComponentResourceState pointing to the current value.
func (c ComponentResourceState) ToPtr() *ComponentResourceState {
	return &c
}

type ComponentTaskState string

const (
	ComponentTaskStateCanceled ComponentTaskState = "Canceled"
	ComponentTaskStateFailed ComponentTaskState = "Failed"
	ComponentTaskStateInitializing ComponentTaskState = "Initializing"
	ComponentTaskStatePending ComponentTaskState = "Pending"
	ComponentTaskStateProcessing ComponentTaskState = "Processing"
	ComponentTaskStateSucceeded ComponentTaskState = "Succeeded"
)

// PossibleComponentTaskStateValues returns the possible values for the ComponentTaskState const type.
func PossibleComponentTaskStateValues() []ComponentTaskState {
	return []ComponentTaskState{	
		ComponentTaskStateCanceled,
		ComponentTaskStateFailed,
		ComponentTaskStateInitializing,
		ComponentTaskStatePending,
		ComponentTaskStateProcessing,
		ComponentTaskStateSucceeded,
	}
}

// ToPtr returns a *ComponentTaskState pointing to the current value.
func (c ComponentTaskState) ToPtr() *ComponentTaskState {
	return &c
}

type ComponentTaskTemplateType string

const (
	ComponentTaskTemplateTypeCreate ComponentTaskTemplateType = "Create"
	ComponentTaskTemplateTypeCustom ComponentTaskTemplateType = "Custom"
	ComponentTaskTemplateTypeDelete ComponentTaskTemplateType = "Delete"
)

// PossibleComponentTaskTemplateTypeValues returns the possible values for the ComponentTaskTemplateType const type.
func PossibleComponentTaskTemplateTypeValues() []ComponentTaskTemplateType {
	return []ComponentTaskTemplateType{	
		ComponentTaskTemplateTypeCreate,
		ComponentTaskTemplateTypeCustom,
		ComponentTaskTemplateTypeDelete,
	}
}

// ToPtr returns a *ComponentTaskTemplateType pointing to the current value.
func (c ComponentTaskTemplateType) ToPtr() *ComponentTaskTemplateType {
	return &c
}

type ComponentTaskType string

const (
	ComponentTaskTypeCreate ComponentTaskType = "Create"
	ComponentTaskTypeCustom ComponentTaskType = "Custom"
	ComponentTaskTypeDelete ComponentTaskType = "Delete"
)

// PossibleComponentTaskTypeValues returns the possible values for the ComponentTaskType const type.
func PossibleComponentTaskTypeValues() []ComponentTaskType {
	return []ComponentTaskType{	
		ComponentTaskTypeCreate,
		ComponentTaskTypeCustom,
		ComponentTaskTypeDelete,
	}
}

// ToPtr returns a *ComponentTaskType pointing to the current value.
func (c ComponentTaskType) ToPtr() *ComponentTaskType {
	return &c
}

type ComponentTemplateType string

const (
	ComponentTemplateTypeEnvironment ComponentTemplateType = "Environment"
	ComponentTemplateTypeNamespace ComponentTemplateType = "Namespace"
	ComponentTemplateTypeRepository ComponentTemplateType = "Repository"
)

// PossibleComponentTemplateTypeValues returns the possible values for the ComponentTemplateType const type.
func PossibleComponentTemplateTypeValues() []ComponentTemplateType {
	return []ComponentTemplateType{	
		ComponentTemplateTypeEnvironment,
		ComponentTemplateTypeNamespace,
		ComponentTemplateTypeRepository,
	}
}

// ToPtr returns a *ComponentTemplateType pointing to the current value.
func (c ComponentTemplateType) ToPtr() *ComponentTemplateType {
	return &c
}

type ComponentType string

const (
	ComponentTypeEnvironment ComponentType = "Environment"
	ComponentTypeNamespace ComponentType = "Namespace"
	ComponentTypeRepository ComponentType = "Repository"
)

// PossibleComponentTypeValues returns the possible values for the ComponentType const type.
func PossibleComponentTypeValues() []ComponentType {
	return []ComponentType{	
		ComponentTypeEnvironment,
		ComponentTypeNamespace,
		ComponentTypeRepository,
	}
}

// ToPtr returns a *ComponentType pointing to the current value.
func (c ComponentType) ToPtr() *ComponentType {
	return &c
}

type DeploymentScopeComponentTypesItem string

const (
	DeploymentScopeComponentTypesItemEnvironment DeploymentScopeComponentTypesItem = "Environment"
	DeploymentScopeComponentTypesItemNamespace DeploymentScopeComponentTypesItem = "Namespace"
	DeploymentScopeComponentTypesItemRepository DeploymentScopeComponentTypesItem = "Repository"
)

// PossibleDeploymentScopeComponentTypesItemValues returns the possible values for the DeploymentScopeComponentTypesItem const type.
func PossibleDeploymentScopeComponentTypesItemValues() []DeploymentScopeComponentTypesItem {
	return []DeploymentScopeComponentTypesItem{	
		DeploymentScopeComponentTypesItemEnvironment,
		DeploymentScopeComponentTypesItemNamespace,
		DeploymentScopeComponentTypesItemRepository,
	}
}

// ToPtr returns a *DeploymentScopeComponentTypesItem pointing to the current value.
func (c DeploymentScopeComponentTypesItem) ToPtr() *DeploymentScopeComponentTypesItem {
	return &c
}

type DeploymentScopeDefinitionType string

const (
	DeploymentScopeDefinitionTypeAzureDevOps DeploymentScopeDefinitionType = "AzureDevOps"
	DeploymentScopeDefinitionTypeAzureResourceManager DeploymentScopeDefinitionType = "AzureResourceManager"
	DeploymentScopeDefinitionTypeGitHub DeploymentScopeDefinitionType = "GitHub"
	DeploymentScopeDefinitionTypeKubernetes DeploymentScopeDefinitionType = "Kubernetes"
)

// PossibleDeploymentScopeDefinitionTypeValues returns the possible values for the DeploymentScopeDefinitionType const type.
func PossibleDeploymentScopeDefinitionTypeValues() []DeploymentScopeDefinitionType {
	return []DeploymentScopeDefinitionType{	
		DeploymentScopeDefinitionTypeAzureDevOps,
		DeploymentScopeDefinitionTypeAzureResourceManager,
		DeploymentScopeDefinitionTypeGitHub,
		DeploymentScopeDefinitionTypeKubernetes,
	}
}

// ToPtr returns a *DeploymentScopeDefinitionType pointing to the current value.
func (c DeploymentScopeDefinitionType) ToPtr() *DeploymentScopeDefinitionType {
	return &c
}

type DeploymentScopeType string

const (
	DeploymentScopeTypeAzureDevOps DeploymentScopeType = "AzureDevOps"
	DeploymentScopeTypeAzureResourceManager DeploymentScopeType = "AzureResourceManager"
	DeploymentScopeTypeGitHub DeploymentScopeType = "GitHub"
	DeploymentScopeTypeKubernetes DeploymentScopeType = "Kubernetes"
)

// PossibleDeploymentScopeTypeValues returns the possible values for the DeploymentScopeType const type.
func PossibleDeploymentScopeTypeValues() []DeploymentScopeType {
	return []DeploymentScopeType{	
		DeploymentScopeTypeAzureDevOps,
		DeploymentScopeTypeAzureResourceManager,
		DeploymentScopeTypeGitHub,
		DeploymentScopeTypeKubernetes,
	}
}

// ToPtr returns a *DeploymentScopeType pointing to the current value.
func (c DeploymentScopeType) ToPtr() *DeploymentScopeType {
	return &c
}

type OrganizationResourceState string

const (
	OrganizationResourceStateDeprovisioned OrganizationResourceState = "Deprovisioned"
	OrganizationResourceStateDeprovisioning OrganizationResourceState = "Deprovisioning"
	OrganizationResourceStateFailed OrganizationResourceState = "Failed"
	OrganizationResourceStateInitializing OrganizationResourceState = "Initializing"
	OrganizationResourceStatePending OrganizationResourceState = "Pending"
	OrganizationResourceStateProvisioned OrganizationResourceState = "Provisioned"
	OrganizationResourceStateProvisioning OrganizationResourceState = "Provisioning"
)

// PossibleOrganizationResourceStateValues returns the possible values for the OrganizationResourceState const type.
func PossibleOrganizationResourceStateValues() []OrganizationResourceState {
	return []OrganizationResourceState{	
		OrganizationResourceStateDeprovisioned,
		OrganizationResourceStateDeprovisioning,
		OrganizationResourceStateFailed,
		OrganizationResourceStateInitializing,
		OrganizationResourceStatePending,
		OrganizationResourceStateProvisioned,
		OrganizationResourceStateProvisioning,
	}
}

// ToPtr returns a *OrganizationResourceState pointing to the current value.
func (c OrganizationResourceState) ToPtr() *OrganizationResourceState {
	return &c
}

type ProjectMembershipRole string

const (
	ProjectMembershipRoleAdapter ProjectMembershipRole = "Adapter"
	ProjectMembershipRoleAdmin ProjectMembershipRole = "Admin"
	ProjectMembershipRoleMember ProjectMembershipRole = "Member"
	ProjectMembershipRoleNone ProjectMembershipRole = "None"
	ProjectMembershipRoleOwner ProjectMembershipRole = "Owner"
)

// PossibleProjectMembershipRoleValues returns the possible values for the ProjectMembershipRole const type.
func PossibleProjectMembershipRoleValues() []ProjectMembershipRole {
	return []ProjectMembershipRole{	
		ProjectMembershipRoleAdapter,
		ProjectMembershipRoleAdmin,
		ProjectMembershipRoleMember,
		ProjectMembershipRoleNone,
		ProjectMembershipRoleOwner,
	}
}

// ToPtr returns a *ProjectMembershipRole pointing to the current value.
func (c ProjectMembershipRole) ToPtr() *ProjectMembershipRole {
	return &c
}

type ProjectResourceState string

const (
	ProjectResourceStateDeprovisioned ProjectResourceState = "Deprovisioned"
	ProjectResourceStateDeprovisioning ProjectResourceState = "Deprovisioning"
	ProjectResourceStateFailed ProjectResourceState = "Failed"
	ProjectResourceStateInitializing ProjectResourceState = "Initializing"
	ProjectResourceStatePending ProjectResourceState = "Pending"
	ProjectResourceStateProvisioned ProjectResourceState = "Provisioned"
	ProjectResourceStateProvisioning ProjectResourceState = "Provisioning"
)

// PossibleProjectResourceStateValues returns the possible values for the ProjectResourceState const type.
func PossibleProjectResourceStateValues() []ProjectResourceState {
	return []ProjectResourceState{	
		ProjectResourceStateDeprovisioned,
		ProjectResourceStateDeprovisioning,
		ProjectResourceStateFailed,
		ProjectResourceStateInitializing,
		ProjectResourceStatePending,
		ProjectResourceStateProvisioned,
		ProjectResourceStateProvisioning,
	}
}

// ToPtr returns a *ProjectResourceState pointing to the current value.
func (c ProjectResourceState) ToPtr() *ProjectResourceState {
	return &c
}

type RepositoryReferenceProvider string

const (
	RepositoryReferenceProviderDevOps RepositoryReferenceProvider = "DevOps"
	RepositoryReferenceProviderGitHub RepositoryReferenceProvider = "GitHub"
	RepositoryReferenceProviderUnknown RepositoryReferenceProvider = "Unknown"
)

// PossibleRepositoryReferenceProviderValues returns the possible values for the RepositoryReferenceProvider const type.
func PossibleRepositoryReferenceProviderValues() []RepositoryReferenceProvider {
	return []RepositoryReferenceProvider{	
		RepositoryReferenceProviderDevOps,
		RepositoryReferenceProviderGitHub,
		RepositoryReferenceProviderUnknown,
	}
}

// ToPtr returns a *RepositoryReferenceProvider pointing to the current value.
func (c RepositoryReferenceProvider) ToPtr() *RepositoryReferenceProvider {
	return &c
}

type RepositoryReferenceType string

const (
	RepositoryReferenceTypeBranch RepositoryReferenceType = "Branch"
	RepositoryReferenceTypeHash RepositoryReferenceType = "Hash"
	RepositoryReferenceTypeTag RepositoryReferenceType = "Tag"
	RepositoryReferenceTypeUnknown RepositoryReferenceType = "Unknown"
)

// PossibleRepositoryReferenceTypeValues returns the possible values for the RepositoryReferenceType const type.
func PossibleRepositoryReferenceTypeValues() []RepositoryReferenceType {
	return []RepositoryReferenceType{	
		RepositoryReferenceTypeBranch,
		RepositoryReferenceTypeHash,
		RepositoryReferenceTypeTag,
		RepositoryReferenceTypeUnknown,
	}
}

// ToPtr returns a *RepositoryReferenceType pointing to the current value.
func (c RepositoryReferenceType) ToPtr() *RepositoryReferenceType {
	return &c
}

type ResultErrorCode string

const (
	ResultErrorCodeConflict ResultErrorCode = "Conflict"
	ResultErrorCodeFailed ResultErrorCode = "Failed"
	ResultErrorCodeForbidden ResultErrorCode = "Forbidden"
	ResultErrorCodeNotFound ResultErrorCode = "NotFound"
	ResultErrorCodeServerError ResultErrorCode = "ServerError"
	ResultErrorCodeUnauthorized ResultErrorCode = "Unauthorized"
	ResultErrorCodeUnknown ResultErrorCode = "Unknown"
	ResultErrorCodeValidationError ResultErrorCode = "ValidationError"
)

// PossibleResultErrorCodeValues returns the possible values for the ResultErrorCode const type.
func PossibleResultErrorCodeValues() []ResultErrorCode {
	return []ResultErrorCode{	
		ResultErrorCodeConflict,
		ResultErrorCodeFailed,
		ResultErrorCodeForbidden,
		ResultErrorCodeNotFound,
		ResultErrorCodeServerError,
		ResultErrorCodeUnauthorized,
		ResultErrorCodeUnknown,
		ResultErrorCodeValidationError,
	}
}

// ToPtr returns a *ResultErrorCode pointing to the current value.
func (c ResultErrorCode) ToPtr() *ResultErrorCode {
	return &c
}

type ScheduleDaysOfWeekItem string

const (
	ScheduleDaysOfWeekItemFriday ScheduleDaysOfWeekItem = "Friday"
	ScheduleDaysOfWeekItemMonday ScheduleDaysOfWeekItem = "Monday"
	ScheduleDaysOfWeekItemSaturday ScheduleDaysOfWeekItem = "Saturday"
	ScheduleDaysOfWeekItemSunday ScheduleDaysOfWeekItem = "Sunday"
	ScheduleDaysOfWeekItemThursday ScheduleDaysOfWeekItem = "Thursday"
	ScheduleDaysOfWeekItemTuesday ScheduleDaysOfWeekItem = "Tuesday"
	ScheduleDaysOfWeekItemWednesday ScheduleDaysOfWeekItem = "Wednesday"
)

// PossibleScheduleDaysOfWeekItemValues returns the possible values for the ScheduleDaysOfWeekItem const type.
func PossibleScheduleDaysOfWeekItemValues() []ScheduleDaysOfWeekItem {
	return []ScheduleDaysOfWeekItem{	
		ScheduleDaysOfWeekItemFriday,
		ScheduleDaysOfWeekItemMonday,
		ScheduleDaysOfWeekItemSaturday,
		ScheduleDaysOfWeekItemSunday,
		ScheduleDaysOfWeekItemThursday,
		ScheduleDaysOfWeekItemTuesday,
		ScheduleDaysOfWeekItemWednesday,
	}
}

// ToPtr returns a *ScheduleDaysOfWeekItem pointing to the current value.
func (c ScheduleDaysOfWeekItem) ToPtr() *ScheduleDaysOfWeekItem {
	return &c
}

type ScheduleDefinitionDaysOfWeekItem string

const (
	ScheduleDefinitionDaysOfWeekItemFriday ScheduleDefinitionDaysOfWeekItem = "Friday"
	ScheduleDefinitionDaysOfWeekItemMonday ScheduleDefinitionDaysOfWeekItem = "Monday"
	ScheduleDefinitionDaysOfWeekItemSaturday ScheduleDefinitionDaysOfWeekItem = "Saturday"
	ScheduleDefinitionDaysOfWeekItemSunday ScheduleDefinitionDaysOfWeekItem = "Sunday"
	ScheduleDefinitionDaysOfWeekItemThursday ScheduleDefinitionDaysOfWeekItem = "Thursday"
	ScheduleDefinitionDaysOfWeekItemTuesday ScheduleDefinitionDaysOfWeekItem = "Tuesday"
	ScheduleDefinitionDaysOfWeekItemWednesday ScheduleDefinitionDaysOfWeekItem = "Wednesday"
)

// PossibleScheduleDefinitionDaysOfWeekItemValues returns the possible values for the ScheduleDefinitionDaysOfWeekItem const type.
func PossibleScheduleDefinitionDaysOfWeekItemValues() []ScheduleDefinitionDaysOfWeekItem {
	return []ScheduleDefinitionDaysOfWeekItem{	
		ScheduleDefinitionDaysOfWeekItemFriday,
		ScheduleDefinitionDaysOfWeekItemMonday,
		ScheduleDefinitionDaysOfWeekItemSaturday,
		ScheduleDefinitionDaysOfWeekItemSunday,
		ScheduleDefinitionDaysOfWeekItemThursday,
		ScheduleDefinitionDaysOfWeekItemTuesday,
		ScheduleDefinitionDaysOfWeekItemWednesday,
	}
}

// ToPtr returns a *ScheduleDefinitionDaysOfWeekItem pointing to the current value.
func (c ScheduleDefinitionDaysOfWeekItem) ToPtr() *ScheduleDefinitionDaysOfWeekItem {
	return &c
}

type UserRole string

const (
	UserRoleAdapter UserRole = "Adapter"
	UserRoleAdmin UserRole = "Admin"
	UserRoleMember UserRole = "Member"
	UserRoleNone UserRole = "None"
	UserRoleOwner UserRole = "Owner"
)

// PossibleUserRoleValues returns the possible values for the UserRole const type.
func PossibleUserRoleValues() []UserRole {
	return []UserRole{	
		UserRoleAdapter,
		UserRoleAdmin,
		UserRoleMember,
		UserRoleNone,
		UserRoleOwner,
	}
}

// ToPtr returns a *UserRole pointing to the current value.
func (c UserRole) ToPtr() *UserRole {
	return &c
}

type UserType string

const (
	UserTypeGroup UserType = "Group"
	UserTypeService UserType = "Service"
	UserTypeSystem UserType = "System"
	UserTypeUser UserType = "User"
)

// PossibleUserTypeValues returns the possible values for the UserType const type.
func PossibleUserTypeValues() []UserType {
	return []UserType{	
		UserTypeGroup,
		UserTypeService,
		UserTypeSystem,
		UserTypeUser,
	}
}

// ToPtr returns a *UserType pointing to the current value.
func (c UserType) ToPtr() *UserType {
	return &c
}

