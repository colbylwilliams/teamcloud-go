//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package teamcloud

import "time"

type AdapterInformation struct {
	DisplayName *string `json:"displayName,omitempty"`
	InputDataForm *string `json:"inputDataForm,omitempty"`
	InputDataSchema *string `json:"inputDataSchema,omitempty"`
	Type *AdapterInformationType `json:"type,omitempty"`
}

type AdapterInformationListDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`

	// READ-ONLY
	Data []*AdapterInformation `json:"data,omitempty" azure:"ro"`
}

type AlternateIdentity struct {
	Login *string `json:"login,omitempty"`
}

// ClientCancelComponentTaskOptions contains the optional parameters for the Client.CancelComponentTask method.
type ClientCancelComponentTaskOptions struct {
	// placeholder for future optional parameters
}

// ClientCreateComponentOptions contains the optional parameters for the Client.CreateComponent method.
type ClientCreateComponentOptions struct {
	Body *ComponentDefinition
}

// ClientCreateComponentTaskOptions contains the optional parameters for the Client.CreateComponentTask method.
type ClientCreateComponentTaskOptions struct {
	Body *ComponentTaskDefinition
}

// ClientCreateDeploymentScopeOptions contains the optional parameters for the Client.CreateDeploymentScope method.
type ClientCreateDeploymentScopeOptions struct {
	Body *DeploymentScopeDefinition
}

// ClientCreateOrganizationOptions contains the optional parameters for the Client.CreateOrganization method.
type ClientCreateOrganizationOptions struct {
	Body *OrganizationDefinition
}

// ClientCreateOrganizationUserOptions contains the optional parameters for the Client.CreateOrganizationUser method.
type ClientCreateOrganizationUserOptions struct {
	Body *UserDefinition
}

// ClientCreateProjectIdentityOptions contains the optional parameters for the Client.CreateProjectIdentity method.
type ClientCreateProjectIdentityOptions struct {
	Body *ProjectIdentityDefinition
}

// ClientCreateProjectOptions contains the optional parameters for the Client.CreateProject method.
type ClientCreateProjectOptions struct {
	Body *ProjectDefinition
}

// ClientCreateProjectTagOptions contains the optional parameters for the Client.CreateProjectTag method.
type ClientCreateProjectTagOptions struct {
	Body map[string]*string
}

// ClientCreateProjectTemplateOptions contains the optional parameters for the Client.CreateProjectTemplate method.
type ClientCreateProjectTemplateOptions struct {
	Body *ProjectTemplateDefinition
}

// ClientCreateProjectUserOptions contains the optional parameters for the Client.CreateProjectUser method.
type ClientCreateProjectUserOptions struct {
	Body *UserDefinition
}

// ClientCreateScheduleOptions contains the optional parameters for the Client.CreateSchedule method.
type ClientCreateScheduleOptions struct {
	Body *ScheduleDefinition
}

// ClientDeleteComponentOptions contains the optional parameters for the Client.DeleteComponent method.
type ClientDeleteComponentOptions struct {
	// placeholder for future optional parameters
}

// ClientDeleteDeploymentScopeOptions contains the optional parameters for the Client.DeleteDeploymentScope method.
type ClientDeleteDeploymentScopeOptions struct {
	// placeholder for future optional parameters
}

// ClientDeleteOrganizationOptions contains the optional parameters for the Client.DeleteOrganization method.
type ClientDeleteOrganizationOptions struct {
	// placeholder for future optional parameters
}

// ClientDeleteOrganizationUserOptions contains the optional parameters for the Client.DeleteOrganizationUser method.
type ClientDeleteOrganizationUserOptions struct {
	// placeholder for future optional parameters
}

// ClientDeleteProjectIdentityOptions contains the optional parameters for the Client.DeleteProjectIdentity method.
type ClientDeleteProjectIdentityOptions struct {
	// placeholder for future optional parameters
}

// ClientDeleteProjectOptions contains the optional parameters for the Client.DeleteProject method.
type ClientDeleteProjectOptions struct {
	// placeholder for future optional parameters
}

// ClientDeleteProjectTagOptions contains the optional parameters for the Client.DeleteProjectTag method.
type ClientDeleteProjectTagOptions struct {
	// placeholder for future optional parameters
}

// ClientDeleteProjectTemplateOptions contains the optional parameters for the Client.DeleteProjectTemplate method.
type ClientDeleteProjectTemplateOptions struct {
	// placeholder for future optional parameters
}

// ClientDeleteProjectUserOptions contains the optional parameters for the Client.DeleteProjectUser method.
type ClientDeleteProjectUserOptions struct {
	// placeholder for future optional parameters
}

// ClientGetAdaptersOptions contains the optional parameters for the Client.GetAdapters method.
type ClientGetAdaptersOptions struct {
	// placeholder for future optional parameters
}

// ClientGetAuditCommandsOptions contains the optional parameters for the Client.GetAuditCommands method.
type ClientGetAuditCommandsOptions struct {
	// placeholder for future optional parameters
}

// ClientGetAuditEntriesOptions contains the optional parameters for the Client.GetAuditEntries method.
type ClientGetAuditEntriesOptions struct {
	Commands []string
	TimeRange *string
}

// ClientGetAuditEntryOptions contains the optional parameters for the Client.GetAuditEntry method.
type ClientGetAuditEntryOptions struct {
	Expand *bool
}

// ClientGetComponentOptions contains the optional parameters for the Client.GetComponent method.
type ClientGetComponentOptions struct {
	// placeholder for future optional parameters
}

// ClientGetComponentTaskOptions contains the optional parameters for the Client.GetComponentTask method.
type ClientGetComponentTaskOptions struct {
	// placeholder for future optional parameters
}

// ClientGetComponentTasksOptions contains the optional parameters for the Client.GetComponentTasks method.
type ClientGetComponentTasksOptions struct {
	// placeholder for future optional parameters
}

// ClientGetComponentTemplateOptions contains the optional parameters for the Client.GetComponentTemplate method.
type ClientGetComponentTemplateOptions struct {
	// placeholder for future optional parameters
}

// ClientGetComponentTemplatesOptions contains the optional parameters for the Client.GetComponentTemplates method.
type ClientGetComponentTemplatesOptions struct {
	// placeholder for future optional parameters
}

// ClientGetComponentsOptions contains the optional parameters for the Client.GetComponents method.
type ClientGetComponentsOptions struct {
	Deleted *bool
}

// ClientGetDeploymentScopeOptions contains the optional parameters for the Client.GetDeploymentScope method.
type ClientGetDeploymentScopeOptions struct {
	// placeholder for future optional parameters
}

// ClientGetDeploymentScopesOptions contains the optional parameters for the Client.GetDeploymentScopes method.
type ClientGetDeploymentScopesOptions struct {
	// placeholder for future optional parameters
}

// ClientGetInfoOptions contains the optional parameters for the Client.GetInfo method.
type ClientGetInfoOptions struct {
	// placeholder for future optional parameters
}

// ClientGetOrganizationOptions contains the optional parameters for the Client.GetOrganization method.
type ClientGetOrganizationOptions struct {
	// placeholder for future optional parameters
}

// ClientGetOrganizationUserMeOptions contains the optional parameters for the Client.GetOrganizationUserMe method.
type ClientGetOrganizationUserMeOptions struct {
	// placeholder for future optional parameters
}

// ClientGetOrganizationUserOptions contains the optional parameters for the Client.GetOrganizationUser method.
type ClientGetOrganizationUserOptions struct {
	// placeholder for future optional parameters
}

// ClientGetOrganizationUsersOptions contains the optional parameters for the Client.GetOrganizationUsers method.
type ClientGetOrganizationUsersOptions struct {
	// placeholder for future optional parameters
}

// ClientGetOrganizationsOptions contains the optional parameters for the Client.GetOrganizations method.
type ClientGetOrganizationsOptions struct {
	// placeholder for future optional parameters
}

// ClientGetProjectIdentitiesOptions contains the optional parameters for the Client.GetProjectIdentities method.
type ClientGetProjectIdentitiesOptions struct {
	// placeholder for future optional parameters
}

// ClientGetProjectIdentityOptions contains the optional parameters for the Client.GetProjectIdentity method.
type ClientGetProjectIdentityOptions struct {
	// placeholder for future optional parameters
}

// ClientGetProjectOptions contains the optional parameters for the Client.GetProject method.
type ClientGetProjectOptions struct {
	// placeholder for future optional parameters
}

// ClientGetProjectStatusOptions contains the optional parameters for the Client.GetProjectStatus method.
type ClientGetProjectStatusOptions struct {
	// placeholder for future optional parameters
}

// ClientGetProjectTagByKeyOptions contains the optional parameters for the Client.GetProjectTagByKey method.
type ClientGetProjectTagByKeyOptions struct {
	// placeholder for future optional parameters
}

// ClientGetProjectTagsOptions contains the optional parameters for the Client.GetProjectTags method.
type ClientGetProjectTagsOptions struct {
	// placeholder for future optional parameters
}

// ClientGetProjectTemplateOptions contains the optional parameters for the Client.GetProjectTemplate method.
type ClientGetProjectTemplateOptions struct {
	// placeholder for future optional parameters
}

// ClientGetProjectTemplatesOptions contains the optional parameters for the Client.GetProjectTemplates method.
type ClientGetProjectTemplatesOptions struct {
	// placeholder for future optional parameters
}

// ClientGetProjectUserMeOptions contains the optional parameters for the Client.GetProjectUserMe method.
type ClientGetProjectUserMeOptions struct {
	// placeholder for future optional parameters
}

// ClientGetProjectUserOptions contains the optional parameters for the Client.GetProjectUser method.
type ClientGetProjectUserOptions struct {
	// placeholder for future optional parameters
}

// ClientGetProjectUsersOptions contains the optional parameters for the Client.GetProjectUsers method.
type ClientGetProjectUsersOptions struct {
	// placeholder for future optional parameters
}

// ClientGetProjectsOptions contains the optional parameters for the Client.GetProjects method.
type ClientGetProjectsOptions struct {
	// placeholder for future optional parameters
}

// ClientGetScheduleOptions contains the optional parameters for the Client.GetSchedule method.
type ClientGetScheduleOptions struct {
	// placeholder for future optional parameters
}

// ClientGetSchedulesOptions contains the optional parameters for the Client.GetSchedules method.
type ClientGetSchedulesOptions struct {
	// placeholder for future optional parameters
}

// ClientGetStatusOptions contains the optional parameters for the Client.GetStatus method.
type ClientGetStatusOptions struct {
	// placeholder for future optional parameters
}

// ClientGetUserProjectsMeOptions contains the optional parameters for the Client.GetUserProjectsMe method.
type ClientGetUserProjectsMeOptions struct {
	// placeholder for future optional parameters
}

// ClientGetUserProjectsOptions contains the optional parameters for the Client.GetUserProjects method.
type ClientGetUserProjectsOptions struct {
	// placeholder for future optional parameters
}

// ClientInitializeAuthorizationOptions contains the optional parameters for the Client.InitializeAuthorization method.
type ClientInitializeAuthorizationOptions struct {
	// placeholder for future optional parameters
}

// ClientNegotiateSignalROptions contains the optional parameters for the Client.NegotiateSignalR method.
type ClientNegotiateSignalROptions struct {
	// placeholder for future optional parameters
}

// ClientReRunComponentTaskOptions contains the optional parameters for the Client.ReRunComponentTask method.
type ClientReRunComponentTaskOptions struct {
	// placeholder for future optional parameters
}

// ClientRunScheduleOptions contains the optional parameters for the Client.RunSchedule method.
type ClientRunScheduleOptions struct {
	// placeholder for future optional parameters
}

// ClientUpdateDeploymentScopeOptions contains the optional parameters for the Client.UpdateDeploymentScope method.
type ClientUpdateDeploymentScopeOptions struct {
	Body *DeploymentScope
}

// ClientUpdateOrganizationUserMeOptions contains the optional parameters for the Client.UpdateOrganizationUserMe method.
type ClientUpdateOrganizationUserMeOptions struct {
	Body *User
}

// ClientUpdateOrganizationUserOptions contains the optional parameters for the Client.UpdateOrganizationUser method.
type ClientUpdateOrganizationUserOptions struct {
	Body *User
}

// ClientUpdateProjectIdentityOptions contains the optional parameters for the Client.UpdateProjectIdentity method.
type ClientUpdateProjectIdentityOptions struct {
	Body *ProjectIdentity
}

// ClientUpdateProjectTagOptions contains the optional parameters for the Client.UpdateProjectTag method.
type ClientUpdateProjectTagOptions struct {
	Body map[string]*string
}

// ClientUpdateProjectTemplateOptions contains the optional parameters for the Client.UpdateProjectTemplate method.
type ClientUpdateProjectTemplateOptions struct {
	Body *ProjectTemplate
}

// ClientUpdateProjectUserMeOptions contains the optional parameters for the Client.UpdateProjectUserMe method.
type ClientUpdateProjectUserMeOptions struct {
	Body *User
}

// ClientUpdateProjectUserOptions contains the optional parameters for the Client.UpdateProjectUser method.
type ClientUpdateProjectUserOptions struct {
	Body *User
}

// ClientUpdateScheduleOptions contains the optional parameters for the Client.UpdateSchedule method.
type ClientUpdateScheduleOptions struct {
	Body *Schedule
}

type CommandAuditEntity struct {
	Command *string `json:"command,omitempty"`
	CommandJSON *string `json:"commandJson,omitempty"`
	ComponentTask *string `json:"componentTask,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	CustomStatus *string `json:"customStatus,omitempty"`

	// Anything
	ETag interface{} `json:"eTag,omitempty"`
	Errors *string `json:"errors,omitempty"`
	ParentID *string `json:"parentId,omitempty"`
	PartitionKey *string `json:"partitionKey,omitempty"`
	ProjectID *string `json:"projectId,omitempty"`
	ResultJSON *string `json:"resultJson,omitempty"`
	RowKey *string `json:"rowKey,omitempty"`
	RuntimeStatus *CommandAuditEntityRuntimeStatus `json:"runtimeStatus,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
	UserID *string `json:"userId,omitempty"`

	// READ-ONLY
	CommandID *string `json:"commandId,omitempty" azure:"ro"`

	// READ-ONLY
	OrganizationID *string `json:"organizationId,omitempty" azure:"ro"`
}

type CommandAuditEntityDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Data *CommandAuditEntity `json:"data,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`
}

type CommandAuditEntityListDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`

	// READ-ONLY
	Data []*CommandAuditEntity `json:"data,omitempty" azure:"ro"`
}

type Component struct {
	// REQUIRED
	Creator *string `json:"creator,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Organization *string `json:"organization,omitempty"`

	// REQUIRED
	OrganizationName *string `json:"organizationName,omitempty"`

	// REQUIRED
	ProjectID *string `json:"projectId,omitempty"`

	// REQUIRED
	ProjectName *string `json:"projectName,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	TemplateID *string `json:"templateId,omitempty"`

	// REQUIRED
	Type *ComponentType `json:"type,omitempty"`
	Deleted *time.Time `json:"deleted,omitempty"`
	DeploymentScopeID *string `json:"deploymentScopeId,omitempty"`
	DeploymentScopeName *string `json:"deploymentScopeName,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Href *string `json:"href,omitempty"`
	IdentityID *string `json:"identityId,omitempty"`
	InputJSON *string `json:"inputJson,omitempty"`
	ResourceID *string `json:"resourceId,omitempty"`
	ResourceState *ComponentResourceState `json:"resourceState,omitempty"`
	ResourceURL *string `json:"resourceUrl,omitempty"`
	TTL *int32 `json:"ttl,omitempty"`
	ValueJSON *string `json:"valueJson,omitempty"`
}

type ComponentDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Data *Component `json:"data,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`
}

type ComponentDefinition struct {
	// REQUIRED
	DisplayName *string `json:"displayName,omitempty"`

	// REQUIRED
	TemplateID *string `json:"templateId,omitempty"`
	DeploymentScopeID *string `json:"deploymentScopeId,omitempty"`
	InputJSON *string `json:"inputJson,omitempty"`
}

type ComponentListDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`

	// READ-ONLY
	Data []*Component `json:"data,omitempty" azure:"ro"`
}

type ComponentTask struct {
	// REQUIRED
	ComponentID *string `json:"componentId,omitempty"`

	// REQUIRED
	ComponentName *string `json:"componentName,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Organization *string `json:"organization,omitempty"`

	// REQUIRED
	OrganizationName *string `json:"organizationName,omitempty"`

	// REQUIRED
	ProjectID *string `json:"projectId,omitempty"`

	// REQUIRED
	ProjectName *string `json:"projectName,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	ExitCode *int32 `json:"exitCode,omitempty"`
	Finished *time.Time `json:"finished,omitempty"`
	InputJSON *string `json:"inputJson,omitempty"`
	Output *string `json:"output,omitempty"`
	RequestedBy *string `json:"requestedBy,omitempty"`
	ResourceID *string `json:"resourceId,omitempty"`
	ScheduleID *string `json:"scheduleId,omitempty"`
	Started *time.Time `json:"started,omitempty"`
	TaskState *ComponentTaskState `json:"taskState,omitempty"`
	Type *ComponentTaskType `json:"type,omitempty"`
	TypeName *string `json:"typeName,omitempty"`
}

type ComponentTaskDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Data *ComponentTask `json:"data,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`
}

type ComponentTaskDefinition struct {
	// REQUIRED
	TaskID *string `json:"taskId,omitempty"`
	InputJSON *string `json:"inputJson,omitempty"`
}

type ComponentTaskListDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`

	// READ-ONLY
	Data []*ComponentTask `json:"data,omitempty" azure:"ro"`
}

type ComponentTaskReference struct {
	ComponentID *string `json:"componentId,omitempty"`
	ComponentName *string `json:"componentName,omitempty"`
	ComponentTaskTemplateID *string `json:"componentTaskTemplateId,omitempty"`
	InputJSON *string `json:"inputJson,omitempty"`
}

type ComponentTaskRunner struct {
	ID *string `json:"id,omitempty"`
	WebServer *bool `json:"webServer,omitempty"`

	// Dictionary of
	With map[string]*string `json:"with,omitempty"`
}

type ComponentTaskTemplate struct {
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	ID *string `json:"id,omitempty"`
	InputJSONSchema *string `json:"inputJsonSchema,omitempty"`
	Type *ComponentTaskTemplateType `json:"type,omitempty"`

	// READ-ONLY
	TypeName *string `json:"typeName,omitempty" azure:"ro"`
}

type ComponentTemplate struct {
	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Organization *string `json:"organization,omitempty"`

	// REQUIRED
	OrganizationName *string `json:"organizationName,omitempty"`

	// REQUIRED
	ParentID *string `json:"parentId,omitempty"`

	// REQUIRED
	Repository *RepositoryReference `json:"repository,omitempty"`

	// REQUIRED
	Type *ComponentTemplateType `json:"type,omitempty"`

	// Anything
	Configuration interface{} `json:"configuration,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Folder *string `json:"folder,omitempty"`
	InputJSONSchema *string `json:"inputJsonSchema,omitempty"`
	Permissions *ComponentTemplatePermissions `json:"permissions,omitempty"`
	TaskRunner *ComponentTaskRunner `json:"taskRunner,omitempty"`
	Tasks []*ComponentTaskTemplate `json:"tasks,omitempty"`
}

type ComponentTemplateDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Data *ComponentTemplate `json:"data,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`
}

type ComponentTemplateListDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`

	// READ-ONLY
	Data []*ComponentTemplate `json:"data,omitempty" azure:"ro"`
}

type ComponentTemplatePermissions struct {
	Adapter []*string `json:"Adapter,omitempty"`
	Admin []*string `json:"Admin,omitempty"`
	Member []*string `json:"Member,omitempty"`
	None []*string `json:"None,omitempty"`
	Owner []*string `json:"Owner,omitempty"`
}

type DeploymentScope struct {
	// REQUIRED
	DisplayName *string `json:"displayName,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	IsDefault *bool `json:"isDefault,omitempty"`

	// REQUIRED
	Organization *string `json:"organization,omitempty"`

	// REQUIRED
	OrganizationName *string `json:"organizationName,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	Type *DeploymentScopeType `json:"type,omitempty"`
	Authorizable *bool `json:"authorizable,omitempty"`
	AuthorizeURL *string `json:"authorizeUrl,omitempty"`
	Authorized *bool `json:"authorized,omitempty"`
	ComponentTypes []*DeploymentScopeComponentTypesItem `json:"componentTypes,omitempty"`
	InputData *string `json:"inputData,omitempty"`
	InputDataSchema *string `json:"inputDataSchema,omitempty"`
	ManagementGroupID *string `json:"managementGroupId,omitempty"`
	SubscriptionIDs []*string `json:"subscriptionIds,omitempty"`
}

type DeploymentScopeDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Data *DeploymentScope `json:"data,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`
}

type DeploymentScopeDefinition struct {
	// REQUIRED
	DisplayName *string `json:"displayName,omitempty"`

	// REQUIRED
	Type *DeploymentScopeDefinitionType `json:"type,omitempty"`
	InputData *string `json:"inputData,omitempty"`
	IsDefault *bool `json:"isDefault,omitempty"`

	// READ-ONLY
	Slug *string `json:"slug,omitempty" azure:"ro"`
}

type DeploymentScopeListDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`

	// READ-ONLY
	Data []*DeploymentScope `json:"data,omitempty" azure:"ro"`
}

type ErrorResult struct {
	Code *int32 `json:"code,omitempty"`
	Errors []*ResultError `json:"errors,omitempty"`
	Status *string `json:"status,omitempty"`
}

type Information struct {
	ImageVersion *string `json:"imageVersion,omitempty"`
	TemplateVersion *string `json:"templateVersion,omitempty"`
}

type InformationDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Data *Information `json:"data,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`
}

type Organization struct {
	// REQUIRED
	DisplayName *string `json:"displayName,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Location *string `json:"location,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// REQUIRED
	Tenant *string `json:"tenant,omitempty"`
	GalleryID *string `json:"galleryId,omitempty"`
	RegistryID *string `json:"registryId,omitempty"`
	ResourceID *string `json:"resourceId,omitempty"`
	ResourceState *OrganizationResourceState `json:"resourceState,omitempty"`
	SecretsVaultID *string `json:"secretsVaultId,omitempty"`
	StorageID *string `json:"storageId,omitempty"`

	// Dictionary of
	Tags map[string]*string `json:"tags,omitempty"`
}

type OrganizationDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Data *Organization `json:"data,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`
}

type OrganizationDefinition struct {
	// REQUIRED
	DisplayName *string `json:"displayName,omitempty"`

	// REQUIRED
	Location *string `json:"location,omitempty"`

	// REQUIRED
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// Dictionary of
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY
	Slug *string `json:"slug,omitempty" azure:"ro"`
}

type OrganizationListDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`

	// READ-ONLY
	Data []*Organization `json:"data,omitempty" azure:"ro"`
}

type Project struct {
	// REQUIRED
	DisplayName *string `json:"displayName,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Organization *string `json:"organization,omitempty"`

	// REQUIRED
	OrganizationName *string `json:"organizationName,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	Template *string `json:"template,omitempty"`
	Deleted *time.Time `json:"deleted,omitempty"`
	ResourceID *string `json:"resourceId,omitempty"`
	ResourceState *ProjectResourceState `json:"resourceState,omitempty"`
	SecretsVaultID *string `json:"secretsVaultId,omitempty"`
	SharedVaultID *string `json:"sharedVaultId,omitempty"`
	StorageID *string `json:"storageId,omitempty"`
	TTL *int32 `json:"ttl,omitempty"`

	// Dictionary of
	Tags map[string]*string `json:"tags,omitempty"`
	TemplateInput *string `json:"templateInput,omitempty"`
	Users []*User `json:"users,omitempty"`

	// READ-ONLY
	VaultID *string `json:"vaultId,omitempty" azure:"ro"`
}

type ProjectDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Data *Project `json:"data,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`
}

type ProjectDefinition struct {
	// REQUIRED
	DisplayName *string `json:"displayName,omitempty"`

	// REQUIRED
	Template *string `json:"template,omitempty"`

	// REQUIRED
	TemplateInput *string `json:"templateInput,omitempty"`
	Users []*UserDefinition `json:"users,omitempty"`

	// READ-ONLY
	Slug *string `json:"slug,omitempty" azure:"ro"`
}

type ProjectIdentity struct {
	// REQUIRED
	DeploymentScopeID *string `json:"deploymentScopeId,omitempty"`

	// REQUIRED
	DisplayName *string `json:"displayName,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Organization *string `json:"organization,omitempty"`

	// REQUIRED
	OrganizationName *string `json:"organizationName,omitempty"`

	// REQUIRED
	ProjectID *string `json:"projectId,omitempty"`

	// REQUIRED
	ProjectName *string `json:"projectName,omitempty"`
	ClientID *string `json:"clientId,omitempty"`
	ClientSecret *string `json:"clientSecret,omitempty"`
	ObjectID *string `json:"objectId,omitempty"`
	RedirectUrls []*string `json:"redirectUrls,omitempty"`
	TenantID *string `json:"tenantId,omitempty"`
}

type ProjectIdentityDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Data *ProjectIdentity `json:"data,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`
}

type ProjectIdentityDefinition struct {
	// REQUIRED
	DeploymentScopeID *string `json:"deploymentScopeId,omitempty"`

	// REQUIRED
	DisplayName *string `json:"displayName,omitempty"`
}

type ProjectIdentityListDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`

	// READ-ONLY
	Data []*ProjectIdentity `json:"data,omitempty" azure:"ro"`
}

type ProjectListDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`

	// READ-ONLY
	Data []*Project `json:"data,omitempty" azure:"ro"`
}

type ProjectMembership struct {
	// REQUIRED
	ProjectID *string `json:"projectId,omitempty"`

	// REQUIRED
	Role *ProjectMembershipRole `json:"role,omitempty"`

	// Dictionary of
	Properties map[string]*string `json:"properties,omitempty"`
}

type ProjectTemplate struct {
	// REQUIRED
	DisplayName *string `json:"displayName,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	IsDefault *bool `json:"isDefault,omitempty"`

	// REQUIRED
	Organization *string `json:"organization,omitempty"`

	// REQUIRED
	OrganizationName *string `json:"organizationName,omitempty"`

	// REQUIRED
	Repository *RepositoryReference `json:"repository,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`
	Components []*string `json:"components,omitempty"`
	Description *string `json:"description,omitempty"`
	InputJSONSchema *string `json:"inputJsonSchema,omitempty"`
	Name *string `json:"name,omitempty"`
}

type ProjectTemplateDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Data *ProjectTemplate `json:"data,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`
}

type ProjectTemplateDefinition struct {
	// REQUIRED
	DisplayName *string `json:"displayName,omitempty"`

	// REQUIRED
	Repository *RepositoryDefinition `json:"repository,omitempty"`
}

type ProjectTemplateListDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`

	// READ-ONLY
	Data []*ProjectTemplate `json:"data,omitempty" azure:"ro"`
}

type RepositoryDefinition struct {
	// REQUIRED
	URL *string `json:"url,omitempty"`
	Token *string `json:"token,omitempty"`
	Version *string `json:"version,omitempty"`
}

type RepositoryReference struct {
	// REQUIRED
	Provider *RepositoryReferenceProvider `json:"provider,omitempty"`

	// REQUIRED
	Type *RepositoryReferenceType `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	BaselURL *string `json:"baselUrl,omitempty"`
	MountURL *string `json:"mountUrl,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Project *string `json:"project,omitempty"`
	Ref *string `json:"ref,omitempty"`
	Repository *string `json:"repository,omitempty"`
	Token *string `json:"token,omitempty"`
	Version *string `json:"version,omitempty"`
}

type ResultError struct {
	Code *ResultErrorCode `json:"code,omitempty"`
	Errors []*ValidationError `json:"errors,omitempty"`
	Message *string `json:"message,omitempty"`
}

type Schedule struct {
	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Organization *string `json:"organization,omitempty"`

	// REQUIRED
	OrganizationName *string `json:"organizationName,omitempty"`

	// REQUIRED
	ProjectID *string `json:"projectId,omitempty"`

	// REQUIRED
	ProjectName *string `json:"projectName,omitempty"`
	ComponentTasks []*ComponentTaskReference `json:"componentTasks,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Creator *string `json:"creator,omitempty"`
	DaysOfWeek []*ScheduleDaysOfWeekItem `json:"daysOfWeek,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	LastRun *time.Time `json:"lastRun,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	LastUpdatedBy *string `json:"lastUpdatedBy,omitempty"`
	Recurring *bool `json:"recurring,omitempty"`
	UTCHour *int32 `json:"utcHour,omitempty"`
	UTCMinute *int32 `json:"utcMinute,omitempty"`
}

type ScheduleDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Data *Schedule `json:"data,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`
}

type ScheduleDefinition struct {
	ComponentTasks []*ComponentTaskReference `json:"componentTasks,omitempty"`
	DaysOfWeek []*ScheduleDefinitionDaysOfWeekItem `json:"daysOfWeek,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Recurring *bool `json:"recurring,omitempty"`
	UTCHour *int32 `json:"utcHour,omitempty"`
	UTCMinute *int32 `json:"utcMinute,omitempty"`
}

type ScheduleListDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`

	// READ-ONLY
	Data []*Schedule `json:"data,omitempty" azure:"ro"`
}

type StatusResult struct {
	Code *int32 `json:"code,omitempty"`
	Errors []*ResultError `json:"errors,omitempty"`
	Location *string `json:"location,omitempty"`
	StateMessage *string `json:"stateMessage,omitempty"`
	Status *string `json:"status,omitempty"`
	TrackingID *string `json:"_trackingId,omitempty"`

	// READ-ONLY
	State *string `json:"state,omitempty" azure:"ro"`
}

type StringDictionaryDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`

	// READ-ONLY; Dictionary of
	Data map[string]*string `json:"data,omitempty" azure:"ro"`
}

type StringListDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`

	// READ-ONLY
	Data []*string `json:"data,omitempty" azure:"ro"`
}

type User struct {
	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Organization *string `json:"organization,omitempty"`

	// REQUIRED
	OrganizationName *string `json:"organizationName,omitempty"`

	// REQUIRED
	Role *UserRole `json:"role,omitempty"`

	// REQUIRED
	UserType *UserType `json:"userType,omitempty"`
	AlternateIdentities *UserAlternateIdentities `json:"alternateIdentities,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	LoginName *string `json:"loginName,omitempty"`
	MailAddress *string `json:"mailAddress,omitempty"`
	ProjectMemberships []*ProjectMembership `json:"projectMemberships,omitempty"`

	// Dictionary of
	Properties map[string]*string `json:"properties,omitempty"`
}

type UserAlternateIdentities struct {
	AzureDevOps *AlternateIdentity `json:"AzureDevOps,omitempty"`
	AzureResourceManager *AlternateIdentity `json:"AzureResourceManager,omitempty"`
	GitHub *AlternateIdentity `json:"GitHub,omitempty"`
	Kubernetes *AlternateIdentity `json:"Kubernetes,omitempty"`
}

type UserDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Data *User `json:"data,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`
}

type UserDefinition struct {
	// REQUIRED
	Identifier *string `json:"identifier,omitempty"`

	// REQUIRED
	Role *string `json:"role,omitempty"`

	// Dictionary of
	Properties map[string]*string `json:"properties,omitempty"`
}

type UserListDataResult struct {
	Code *int32 `json:"code,omitempty"`
	Location *string `json:"location,omitempty"`
	Status *string `json:"status,omitempty"`

	// READ-ONLY
	Data []*User `json:"data,omitempty" azure:"ro"`
}

type ValidationError struct {
	Field *string `json:"field,omitempty"`
	Message *string `json:"message,omitempty"`
}

